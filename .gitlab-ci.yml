# Variable definitions
variables:
  LAZ_PROJECT_FILE:
    value: "opsiclientkiosk.lpi"
    description: "Project file of the lazarus project."
  
  BINARY_NAME_WINDOWS:
    value: "opsiclientkiosk.exe"
  
  BINARY_NAME_LINUX:
    value: "opsiclientkiosk"
  
  BINARY_NAME_MAC:
    value: "OpsiClientKiosk"

  SSL_LIB_VERSION:
    value: "1.1.1n"

  GIT_SUBMODULE_STRATEGY: recursive


stages:
  - init
  - build
  - bundle
  - binaryindex
  - package


#**********************************************#
#  Get the binary version from the             # 
#  Lazarus Project file (opsiclientkiosk.lpi). #
#  The file format is xml.                     #
#**********************************************#
get version:
  stage: init
  tags:
    - laz-win10
  script:
    - New-Item version.env
    - $doc = [XML] (Get-Content -Path $LAZ_PROJECT_FILE)
    - $BINARY_VERSION = $doc.SelectSingleNode("//MajorVersionNr").Value + "." + $doc.SelectSingleNode("//MinorVersionNr").Value + "." + $doc.SelectSingleNode("//RevisionNr").Value + "." + $doc.SelectSingleNode("//BuildNr").Value
    - Add-Content version.env "BINARY_VERSION=${BINARY_VERSION}"
  artifacts:
    reports:
      dotenv: version.env


#***************************************#
#  compile and codesign Windows         #
#***************************************#
compile opsi-client-kiosk windows:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-win10
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for Windows (32 Bit)"
    - C:\lazarus\lazbuild.exe $LAZ_PROJECT_FILE --build-all --build-mode=Release_Windows
    - echo "Code signing ${BINARY_NAME_WINDOWS} (Version ${BINARY_VERSION}) for windows"
    - opsi-dev-tool --version
    - opsi-dev-tool -l info --signserver-sign builds\i386-win32\${BINARY_NAME_WINDOWS}
  artifacts:
    name: "$BINARY_NAME_WINDOWS $BINARY_VERSION Windows 32Bit"
    paths:
      - builds\i386-win32\${BINARY_NAME_WINDOWS}

   
#***************************************#
#  compile linux                        #
#***************************************#
compile opsi-client-kiosk linux:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-linux
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for Linux (64 Bit)"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_Linux
  artifacts:
    name: "$BINARY_NAME_LINUX $BINARY_VERSION Linux 64Bit"
    paths:
      - builds/x86_64-linux/${BINARY_NAME_LINUX}


#***************************************#
#  compile MacOS                        #
#***************************************#
compile opsi-client-kiosk macos:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-macos
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for MacOS (Intel, 64 Bit)"
    - /Library/Lazarus/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_MacOS --ws=cocoa
  artifacts:
    name: "$BINARY_NAME_MAC $BINARY_VERSION MacOS 64Bit Intel"
    paths:
      - builds/x86_64-darwin/${BINARY_NAME_MAC}


#*********************************************#
#  make opsi-client-kiosk bundle for Windows  #
#*********************************************#
make opsi-client-kiosk bundle for Windows:
  stage: bundle
  dependencies:
    - get version
    - compile opsi-client-kiosk windows
  tags:
    - laz-win10
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer erstellen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Make opsi-client-kiosk bundle (Version ${BINARY_VERSION}) for Windows (32 Bit)"
    - $BundleDir = 'app_windows'
    - if (Test-Path $BundleDir) { Remove-Item -Path $BundleDir -Recurse }
    - New-Item -Path $BundleDir -ItemType Directory
    - cd $BundleDir
    - Copy-Item '..\default' -Recurse .
    - Copy-Item '..\locale' -Recurse .
    - Copy-Item '..\ock_custom' -Recurse .
    - Copy-Item '..\opsiclientkiosk.conf' .
    - Copy-Item ..\builds\i386-win32\${BINARY_NAME_WINDOWS} .
    # Get libs from binaryindex
    - opsi-dev-tool --version
    - opsi-dev-tool --binary-pull development ssl-libs windows x86 $SSL_LIB_VERSION .
    - Copy-Item ssl-libs\* -Recurse .
    - Remove-Item -Path ssl-libs -Recurse
  artifacts:
    name: "app_windows"
    paths: 
      - app_windows


#***************************************#
#  upload binaries to binaryindex       #
#***************************************#
opsi-client-kiosk to binaryindex:
  stage: binaryindex
  tags:
    - laz-linux
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG 
      when: always
    #- if: $CI_COMMIT_BRANCH == "main"
    #  when: manual
  script:
    - echo "deploy to binaryindex"
    - opsi-dev-tool --version
    - opsi-dev-tool -l info --binary-push builds/i386-win32/${BINARY_NAME_WINDOWS} opsi-client-kiosk windows x86 "${BINARY_VERSION}"
    - opsi-dev-tool -l info --binary-push builds/x86_64-linux/${BINARY_NAME_LINUX} opsi-client-kiosk linux x64 "${BINARY_VERSION}"
    - opsi-dev-tool -l info --binary-push builds/x86_64-darwin/${BINARY_NAME_MAC}  opsi-client-kiosk darwin x64 "${BINARY_VERSION}"

  
#***************************************#
#  make opsi-package for Windows        #
#***************************************#
opsi-package windows:
  stage: package
  dependencies:
    - get version
    - compile opsi-client-kiosk windows
    - make opsi-client-kiosk bundle for Windows
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG 
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - set -ex
    - echo "Building opsi-package (Version ${BINARY_VERSION}) for Windows (32 Bit)"
    - opsiPackage_Path="opsi-packages/windows/opsi-client-kiosk"
    - Files_Path="$opsiPackage_Path/CLIENT_DATA/files"
    - mkdir -p $Files_Path
    - mv app_windows $Files_Path/app
    #- cp -r app $Files_Path
    - opsi-dev-tool --version
    - opsi-dev-tool --binary-pull development client-kiosk-icon-collection all all latest .
    - mkdir -p $Files_Path/resources
    - mv Collection64x64.zip $Files_Path/resources/Collection64x64.zip
    - cd $opsiPackage_Path
    # - export version=`grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - version=$BINARY_VERSION
    - 'sed -i "/Product/,/version:/s/version: .*\$/version: $version/" OPSI/control'
    - package=`grep OPSI/control -A 4 -e "\[Package\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - '[ "$CI_COMMIT_TAG" = "" ] && package="$package.$CI_JOB_ID"'
    - 'sed -i "/Package/,/version:/s/version: .*\$/version: $package/" OPSI/control'
    - echo "building version $version-$package"
    - opsi-makepackage --no-set-rights -l 6
    - upload-package opsi-client-kiosk*.opsi true true true false


