# Variable definitions
variables:
  LAZ_PROJECT_FILE:
    value: "opsiclientkiosk.lpi"
    description: "Project file of the lazarus project."
  
  BINARY_NAME_WINDOWS:
    value: "opsiclientkiosk.exe"
  
  BINARY_NAME_LINUX:
    value: "opsiclientkiosk"
  
  BINARY_NAME_MAC:
    value: "OpsiClientKiosk"

  GIT_SUBMODULE_STRATEGY: recursive


stages:
  - init
  - build
  - binaryindex
  # - package


get version:
  stage: init
  tags:
    - laz-win10
  script:
    - New-Item version.env
    - $doc = [XML] (Get-Content -Path $LAZ_PROJECT_FILE)
    - $BINARY_VERSION = $doc.SelectSingleNode("//MajorVersionNr").Value + "." + $doc.SelectSingleNode("//MinorVersionNr").Value + "." + $doc.SelectSingleNode("//RevisionNr").Value + "." + $doc.SelectSingleNode("//BuildNr").Value
    - Add-Content version.env "BINARY_VERSION=${BINARY_VERSION}"
  artifacts:
    reports:
      dotenv: version.env


#***************************************#
#  compile and codesign Windows         #
#***************************************#
compile opsi-client-kiosk windows:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-win10
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for Windows (32 Bit)"
    - C:\lazarus\lazbuild.exe $LAZ_PROJECT_FILE --build-all --build-mode=Release_Windows
    - echo "Code signing ${BINARY_NAME_WINDOWS} (Version ${BINARY_VERSION}) for windows"
    - opsi-dev-tool -l info --signserver-sign builds\i386-win32\${BINARY_NAME_WINDOWS}
  artifacts:
    name: "$BINARY_NAME_WINDOWS $BINARY_VERSION Windows 32Bit)"
    paths:
      - builds\i386-win32\${BINARY_NAME_WINDOWS}

   
#***************************************#
#  compile linux                        #
#***************************************#
compile opsi-client-kiosk linux:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-linux
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for Linux (64 Bit)"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_Linux
  artifacts:
    name: "$BINARY_NAME_LINUX $BINARY_VERSION Linux 64Bit"
    paths:
      - builds/x86_64-linux/${BINARY_NAME_LINUX}


#***************************************#
#  compile and codesign MacOS           #
#***************************************#
compile opsi-client-kiosk macos:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-macos
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for MacOS (Intel, 64 Bit)"
    - /Library/Lazarus/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_MacOS --ws=cocoa
   
    #---CODE SIGNING---
    - echo "Code signing $BINARY_NAME_MAC for MacOS"
    - PATH_TO_BINARY=builds/x86_64-darwin/${BINARY_NAME_MAC}
    - echo "$PATH_TO_BINARY (PATH_TO_BINARY)"
    # - codesign -s "$CODE_SIGN_SIGNATURE" -v -f --timestamp --options=runtime $ENTITLEMENTS $PATH_TO_BINARY
    - codesign -s "$APPLE_DEVELOPER_ID" -v -f --timestamp $PATH_TO_BINARY
    - echo "Verify code signing"
    - codesign --verify -v $PATH_TO_BINARY
  artifacts:
    name: "$BINARY_NAME_MAC $BINARY_VERSION MacOS 64Bit Intel"
    paths:
      - builds/x86_64-darwin/${BINARY_NAME_MAC}


#***************************************#
#  upload artifacts to binaryindex      #
#***************************************#
opsi-client-kiosk to binaryindex:
  stage: binaryindex
  tags:
    - laz-linux
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG 
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - echo "deploy to binaryindex"
    - opsi-dev-tool -l info --binary-push builds/i386-win32/${BINARY_NAME_WINDOWS} opsi-client-kiosk windows x86 "${BINARY_VERSION}"
    - opsi-dev-tool -l info --binary-push builds/x86_64-linux/${BINARY_NAME_LINUX} opsi-client-kiosk linux x64 "${BINARY_VERSION}"
    - opsi-dev-tool -l info --binary-push builds/x86_64-darwin/${BINARY_NAME_MAC}  opsi-client-kiosk darwin x64 "${BINARY_VERSION}"
