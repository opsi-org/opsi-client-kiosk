# Variable definitions
variables:
  LAZ_PROJECT_FILE:
    value: "opsiclientkiosk.lpi"
    description: "Project file of the lazarus project."
  
  BINARY_NAME_WINDOWS:
    value: "opsiclientkiosk.exe"
  
  BINARY_NAME_LINUX:
    value: "opsiclientkiosk"
  
  BINARY_NAME_MAC:
    value: "OpsiClientKiosk"

  SSL_LIB_VERSION: #only windows
    value: "1.1.1n"

  GIT_SUBMODULE_STRATEGY: recursive


stages:
  - init
  - build
  - bundle
  - binaryindex
  - package


#**********************************************#
#  Get the binary version from the             # 
#  Lazarus Project file (opsiclientkiosk.lpi). #
#  The file format is xml.                     #
#**********************************************#
get version:
  stage: init
  tags:
    - laz-win10
  script:
    - New-Item version.env
    - $doc = [XML] (Get-Content -Path $LAZ_PROJECT_FILE)
    - $MajorVersionNr = $doc.SelectSingleNode("//MajorVersionNr").Value
    - if ($MajorVersionNr -eq $null) {$MajorVersionNr = 0}
    - $MinorVersionNr = $doc.SelectSingleNode("//MinorVersionNr").Value
    - if ($MinorVersionNr -eq $null) {$MinorVersionNr = 0}
    - $RevisionNr = $doc.SelectSingleNode("//RevisionNr").Value
    - if ($RevisionNr -eq $null) {$RevisionNr = 0}
    - $BuildNr = $doc.SelectSingleNode("//BuildNr").Value
    - if ($BuildNr -eq $null) {$BuildNr = 0}
    - $BINARY_VERSION = $MajorVersionNr + "." + $MinorVersionNr + "." + $RevisionNr + "." + $BuildNr
    - echo $BINARY_VERSION
    - Add-Content version.env "BINARY_VERSION=${BINARY_VERSION}"
  artifacts:
    reports:
      dotenv: version.env


#***************************************************#
#  Upload opsiclientkiosk.pot file to transifex     # 
#  Download opsiclientkiosk.po files from transifex #
#***************************************************#
transifex:
  stage: init
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  script:
  - opsi-dev-cli --version
  - opsi-dev-cli -l info transifex upload-resource ./locale/opsiclientkiosk.pot
  - opsi-dev-cli -l info transifex download-translations opsiclientkiosk.pot ./locale --min-translation-rate 1.0 --language de --language fr
  artifacts:
    name: "locale"
    paths:
      - locale


#***************************************#
#  compile and codesign Windows         #
#***************************************#
compile opsi-client-kiosk windows:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-win10
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for Windows (32 Bit)"
    - C:\lazarus\lazbuild.exe $LAZ_PROJECT_FILE --build-all --build-mode=Release_Windows
    - echo "Code signing ${BINARY_NAME_WINDOWS} (Version ${BINARY_VERSION}) for windows"
    - opsi-dev-tool --version
    - opsi-dev-tool -l info --signserver-sign builds\i386-win32\${BINARY_NAME_WINDOWS}
  artifacts:
    name: "$BINARY_NAME_WINDOWS $BINARY_VERSION Windows 32Bit"
    paths:
      - builds\i386-win32\${BINARY_NAME_WINDOWS}

   
#***************************************#
#  compile linux                        #
#***************************************#
compile opsi-client-kiosk linux:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-linux
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for Linux (64 Bit)"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_Linux
  artifacts:
    name: "$BINARY_NAME_LINUX $BINARY_VERSION Linux 64Bit"
    paths:
      - builds/x86_64-linux/${BINARY_NAME_LINUX}


#***************************************#
#  compile MacOS                        #
#***************************************#
compile opsi-client-kiosk macos:
  stage: build
  dependencies:
    - get version
  tags:
    - laz-macos
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer bauen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Compiling ${LAZ_PROJECT_FILE} (Version ${BINARY_VERSION}) for MacOS (Intel, 64 Bit)"
    - /Library/Lazarus/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_MacOS --ws=cocoa
  artifacts:
    name: "$BINARY_NAME_MAC $BINARY_VERSION MacOS 64Bit Intel"
    paths:
      - builds/x86_64-darwin/${BINARY_NAME_MAC}



#*********************************************#
#  make opsi-client-kiosk bundle for Windows  #
#*********************************************#
make opsi-client-kiosk bundle for Windows:
  stage: bundle
  dependencies:
    - get version
    - compile opsi-client-kiosk windows
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer erstellen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - SSL_LIB_VERSION="1.1.1n"
    - echo "Make opsi-client-kiosk bundle (Version ${BINARY_VERSION}) for Windows (32 Bit)"
    - $BundleDir = 'app_windows'
    #- if [ -d $BundleDir ]; then rm -rf $BundleDir fi
    - mkdir $BundleDir 
    - cd $BundleDir
    - cp -r ../default .
    - cp -r ../locale .
    - cp -r ../ock_custom .
    - cp -r ../opsiclientkiosk.conf .
    - cp -r ../builds/i386-win32/${BINARY_NAME_WINDOWS} .
    # Get libs from binaryindex
    - opsi-dev-tool --version
    # openssl libs
    - opsi-dev-tool --binary-pull development ssl-libs windows x86 $SSL_LIB_VERSION .
    - cp -r ssl-libs/* .
    - rm -r ssl-libs
    # sqlite lib
    - opsi-dev-tool --binary-pull development sqlite windows x86 3.0.0 .
  artifacts:
    name: "app_windows"
    paths: 
      - app_windows


#*********************************************#
#  make opsi-client-kiosk bundle for Linux    #
#*********************************************#
make opsi-client-kiosk bundle for Linux:
  stage: bundle
  dependencies:
    - get version
    - compile opsi-client-kiosk linux
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer erstellen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  script:
    - echo "Make opsi-client-kiosk bundle (Version ${BINARY_VERSION}) for Linux (64 Bit)"
    - SSL_LIB_VERSION="1.1-oldlibc"
    - BundleDir="app_linux"
    #- if [ -d $BundleDir ]; then rm -rf $BundleDir fi
    - mkdir $BundleDir 
    - cd $BundleDir
    - cp -r ../default .
    - cp -r ../locale .
    - cp -r ../ock_custom .
    - cp -r ../opsiclientkiosk.conf .
    - cp -r ../builds/x86_64-linux/${BINARY_NAME_LINUX} .
    # Get libs from binaryindex
    - opsi-dev-tool --version
    - opsi-dev-tool --binary-pull development ssl-libs linux x64 $SSL_LIB_VERSION .
    - cp -r ssl-libs/* .
    - rm -r ssl-libs
  artifacts:
    name: "app_linux"
    paths: 
      - app_linux


#*********************************************#
#  make opsi-client-kiosk bundle for MacOS    #
#*********************************************#
make opsi-client-kiosk bundle for MacOS:
  stage: bundle
  dependencies:
    - get version
    - compile opsi-client-kiosk macos
  tags:
    - macos_catalina
  rules:
    # Wenn gepusht oder ein Merge Request erstellt wird immer erstellen
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event" 
      when: always
  before_script:
    - curl -o opsi-dev-tools.tar.gz "$OPSIDEVTOOLS_URL_DARWIN_X64"
    - tar -xvf opsi-dev-tools.tar.gz
    - cp opsi-dev-tool opsi-dev-cli
  script:
    - echo "Make opsi-client-kiosk bundle (Version ${BINARY_VERSION}) for MacOS (64 Bit)"
    - SSL_LIB_VERSION="1.1-unsigned"
    - BundleDir="app_macos"
    - mkdir $BundleDir 
    - cd $BundleDir
    # Make Apple application structure
    - mkdir OpsiClientKiosk.app
    - mkdir OpsiClientKiosk.app/Contents
    - mkdir OpsiClientKiosk.app/Contents/MacOS
    - mkdir OpsiClientKiosk.app/Contents/Resources
    - mkdir OpsiClientKiosk.app/Contents/Frameworks
    # Patch Info.plist
    - sed -i '' -e "/CFBundleShortVersionString/,/<\/string>/s/<string>.*<\/string>/<string>$BINARY_VERSION<\/string>/" ../Info.plist
    - cp -r ../Info.plist OpsiClientKiosk.app/Contents
    # make PkgInfo
    - echo "APPL????" > PkgInfo
    # Get libraries from binaryindex and copy them to Frameworks
    - ./../opsi-dev-tool --version
    # openssl libs
    - ./../opsi-dev-tool --binary-pull development ssl-libs darwin x64 $SSL_LIB_VERSION .
    - cp -r ssl-libs/* OpsiClientKiosk.app/Contents/Frameworks
    - rm -r ssl-libs
    # sqlite lib
    - ./../opsi-dev-tool --binary-pull development sqlite darwin x64 3.0.0 OpsiClientKiosk.app/Contents/Frameworks
    # copy opsiclientkiosk binary to OpsiClientKiosk.app/Contents/MacOS 
    - cp -r ../builds/x86_64-darwin/${BINARY_NAME_MAC} OpsiClientKiosk.app/Contents/MacOS
    # copy resources to OpsiClientKiosk.app/Contents/Resource
    - cp -r ../default OpsiClientKiosk.app/Contents/Resources
    - cp -r ../locale OpsiClientKiosk.app/Contents/Resources
    - cp -r ../opsiclientkiosk.ico OpsiClientKiosk.app/Contents/Resources
    # Codesign and notarize application
    - ./../opsi-dev-cli -l info apple sign-and-notarize --print-log OpsiClientKiosk.app
    # copy files which could be changed by customer to app_macos folder 
    # they had to be not within the Application structure because the Application will be codesigned and files within could not be changed anymore
    - cp -r ../ock_custom .
    - cp -r ../opsiclientkiosk.conf .

  artifacts:
    name: "app_macos"
    paths:
      - app_macos

#***************************************#
#  upload binaries to binaryindex       #
#***************************************#
opsi-client-kiosk to binaryindex:
  stage: binaryindex
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  rules:
    - if: $CI_COMMIT_TAG != null
      when: always
    #- if: $CI_COMMIT_BRANCH == "main"
    #  when: manual
  script:
    - echo "deploy to binaryindex"
    - opsi-dev-tool --version
    - opsi-dev-tool -l info --binary-push builds/i386-win32/${BINARY_NAME_WINDOWS} opsi-client-kiosk windows x86 "${BINARY_VERSION}"
    - opsi-dev-tool -l info --binary-push builds/x86_64-linux/${BINARY_NAME_LINUX} opsi-client-kiosk linux x64 "${BINARY_VERSION}"
    - opsi-dev-tool -l info --binary-push builds/x86_64-darwin/${BINARY_NAME_MAC}  opsi-client-kiosk darwin x64 "${BINARY_VERSION}"

  
#***************************************#
#  make opsi-package for Windows        #
#***************************************#
opsi-package windows:
  stage: package
  dependencies:
    - get version
    - compile opsi-client-kiosk windows
    - make opsi-client-kiosk bundle for Windows
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  rules:
    - if: $CI_COMMIT_TAG != null
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - set -ex
    - echo "Building opsi-package (Version ${BINARY_VERSION}) for Windows (32 Bit)"
    - opsiPackage_Path="opsi-packages/windows/opsi-client-kiosk"
    - Files_Path="$opsiPackage_Path/CLIENT_DATA/files"
    - mkdir -p $Files_Path
    - mv app_windows $Files_Path/app
    #- cp -r app $Files_Path
    - opsi-dev-tool --version
    - opsi-dev-tool --binary-pull development client-kiosk-icon-collection all all latest .
    - mkdir -p $Files_Path/resources
    - mv Collection64x64.zip $Files_Path/resources/Collection64x64.zip
    - cd $opsiPackage_Path
    # - export version=`grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - version=$BINARY_VERSION
    - 'sed -i "/Product/,/version:/s/version: .*\$/version: $version/" OPSI/control'
    - package=`grep OPSI/control -A 4 -e "\[Package\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - '[ "$CI_COMMIT_TAG" = "" ] && package="$package.$CI_JOB_ID"'
    - 'sed -i "/Package/,/version:/s/version: .*\$/version: $package/" OPSI/control'
    - echo "building version $version-$package"
    - opsi-makepackage --no-set-rights -l 6
    - upload-package opsi-client-kiosk*.opsi true true true false


#***************************************#
#  make opsi-package for Linux          #
#***************************************#
opsi-package linux:
  stage: package
  dependencies:
    - get version
    - compile opsi-client-kiosk linux
    - make opsi-client-kiosk bundle for Linux
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  rules:
    - if: $CI_COMMIT_TAG != null
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - set -ex
    - echo "Building opsi-package (Version ${BINARY_VERSION}) for Linux (64 Bit)"
    - opsiPackage_Path="opsi-packages/linux/l-opsi-client-kiosk"
    - Files_Path="$opsiPackage_Path/CLIENT_DATA/files"
    - mkdir -p $Files_Path
    - mv app_linux $Files_Path/app
    #- cp -r app $Files_Path
    - opsi-dev-tool --version
    - opsi-dev-tool --binary-pull development client-kiosk-icon-collection all all latest .
    - mkdir -p $Files_Path/resources
    - mv Collection64x64.zip $Files_Path/resources/Collection64x64.zip
    - cd $opsiPackage_Path
    # - export version=`grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - version=$BINARY_VERSION
    - 'sed -i "/Product/,/version:/s/version: .*\$/version: $version/" OPSI/control'
    - package=`grep OPSI/control -A 4 -e "\[Package\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - '[ "$CI_COMMIT_TAG" = "" ] && package="$package.$CI_JOB_ID"'
    - 'sed -i "/Package/,/version:/s/version: .*\$/version: $package/" OPSI/control'
    - echo "building version $version-$package"
    - opsi-makepackage --no-set-rights -l 6
    - upload-package l-opsi-client-kiosk*.opsi true true true false


#***************************************#
#  make opsi-package for MacOS          #
#***************************************#
opsi-package macos:
  stage: package
  dependencies:
    - get version
    - compile opsi-client-kiosk macos
    - make opsi-client-kiosk bundle for MacOS
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default
  rules:
    - if: $CI_COMMIT_TAG != null
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - set -ex
    - echo "Building opsi-package (Version ${BINARY_VERSION}) for MacOS (64 Bit)"
    - opsiPackage_Path="opsi-packages/macos/m-opsi-client-kiosk"
    - Files_Path="$opsiPackage_Path/CLIENT_DATA/files"
    - mkdir -p $Files_Path
    - mv app_macos $Files_Path/app
    #- cp -r app $Files_Path
    - opsi-dev-tool --version
    - opsi-dev-tool --binary-pull development client-kiosk-icon-collection all all latest .
    - mkdir -p $Files_Path/resources
    - mv Collection64x64.zip $Files_Path/resources/Collection64x64.zip
    - cd $opsiPackage_Path
    # - export version=`grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - version=$BINARY_VERSION
    - 'sed -i "/Product/,/version:/s/version: .*\$/version: $version/" OPSI/control'
    - package=`grep OPSI/control -A 4 -e "\[Package\]" | grep "version:" | tr -d "^a-zA-Z :"`
    - '[ "$CI_COMMIT_TAG" = "" ] && package="$package.$CI_JOB_ID"'
    - 'sed -i "/Package/,/version:/s/version: .*\$/version: $package/" OPSI/control'
    - echo "building version $version-$package"
    - opsi-makepackage --no-set-rights -l 6
    - upload-package m-opsi-client-kiosk*.opsi true true true false